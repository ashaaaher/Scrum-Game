import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)import java.lang.Thread;/** * Write a description of class KinectHand here. *  * @author (your name)  * @version (a version number or a date) */public class KinectHand extends Actor{    public static boolean isDiceInHand=false;    public static boolean isToolsCardPicked=false;    public static boolean isOpportunityCardPicked=false;    public static boolean isImpedimentCardPicked=false;    public static boolean isCardPicked=false;    private UserData[] users;    /**     * Act - do whatever the KinectHand wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */    public void act()     {        // Add your action code here.        GameScreen w = (GameScreen)getWorld();        users = w.getTrackedUsers();        if(!isDiceInHand)        {            for (UserData user : users)            {                Joint rightHand = user.getJoint(Joint.RIGHT_HAND);                this.setLocation(rightHand.getX(),rightHand.getY());            }            //             Greenfoot.mouseDragged(w.getDice());        }        // for hand meeting dice        if(this.getOneIntersectingObject(Dice.class)!=null)//|| Greenfoot.mouseClicked(w.getDice()) || Greenfoot.isKeyDown("r")==true)        {            //             this.isDiceInHand = true;            //             Dice.isDiceFalling = false;            if(!GameScreen.shouldPlayerPickCard && !isCardPicked)            {                this.isDiceInHand = true;                Dice.isDiceFalling = false;                animateDie(w);            }            else             {                this.setLocation(100, 100);                users = w.getTrackedUsers();                for (UserData user : users)                {                    Joint rightHand = user.getJoint(Joint.RIGHT_HAND);                    this.setLocation(rightHand.getX(),rightHand.getY());                }                //                 System.out.println("First close card");            }        }        // Pick card with hand        if(GameScreen.shouldPlayerPickCard)        {            // for hand on tools cards deck            if(this.getOneIntersectingObject(ToolsCardFactory.class)!=null && GameScreen.shouldPlayerPickToolCard)            {                this.setLocation(600, 100);                //             System.out.println("Hand meets opp cards");                isToolsCardPicked=true;                isOpportunityCardPicked=false;                isImpedimentCardPicked=false;                isCardPicked = true;                // GameScreen.shouldPlayerPickToolCard = false;                //             w.getToolsCard();            }            // for hand on impediment cards deck            if(this.getOneIntersectingObject(ImpedimentCardFactory.class)!=null && GameScreen.shouldPlayerPickImpedimentCard)            {                this.setLocation(600, 100);                Greenfoot.playSound("impediment.wav");                //             System.out.println("Hand meets imp cards");                isToolsCardPicked=false;                isOpportunityCardPicked=false;                isImpedimentCardPicked=true;                isCardPicked = true;                //             w.getImpedimentCard();            }            // for hand on opportunity cards deck            if(this.getOneIntersectingObject(OpportunityCardFactory.class)!=null && GameScreen.shouldPlayerPickOpportunityCard)            {                this.setLocation(600, 100);                //             System.out.println("Hand meets opp cards");                isToolsCardPicked=false;                isOpportunityCardPicked=true;                isImpedimentCardPicked=false;                isCardPicked = true;                //                     }        }        // for hand on close card button        if(this.getOneIntersectingObject(Close.class)!=null)        {            if( !GameScreen.shouldPlayerPickCard)// && !isCardPicked)            //             if(isCardPicked)            {                GameScreen.shouldPlayerPickCard = false;                if(isImpedimentCardPicked)                {                    for (UserData user : users)                    {                        Joint rightFoot = user.getJoint(Joint.RIGHT_FOOT);                        System.out.println("kick to remove impediment");                        if(rightFoot.getY()<400)                        //                         w.addObject() can add kick here                        {                            w.removeObject(w.getDisplayCard());                            isImpedimentCardPicked=false;                        }                    }                }                else                {                    isToolsCardPicked=false;                    isOpportunityCardPicked=false;                    isImpedimentCardPicked=false;                    isCardPicked = false;                    w.removeObject(w.getDisplayCard());                }            }            }    }    public void animateDie(GameScreen w)    {        this.setImage("fist.png");        for (UserData user : users)        {            Joint rightHand = user.getJoint(Joint.RIGHT_HAND);            if(/*rightHand.getX(),*/rightHand.getY()<250/*>w.getHeight()*/)            {                this.setImage("hand.png");                this.isDiceInHand=false;                Dice.isDiceFalling=true;            }            else            {                this.setLocation(rightHand.getX(),rightHand.getY());                w.getDice().setLocation(rightHand.getX(),rightHand.getY());            }        }    }}